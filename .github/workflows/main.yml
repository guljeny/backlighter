# This is a basic workflow to help you get started with Actions

name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-firmvare:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 2

    - name: git diff
      id: build_info
      run: |
        echo "::set-output name=is_changed::$(git diff-tree --no-commit-id --name-only --diff-filter=AM -r ${{ github.sha }} | grep version.txt | wc -l)"

    - name: install arduino cli
      # if: steps.build_info.outputs.is_changed > 0
      run:  curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | sh

    - name: install socket.io lib
      # if: steps.build_info.outputs.is_changed > 0
      run: sudo ./bin/arduino-cli lib install SocketIoClient

    - name: install WebSocketsClient lib
      # if: steps.build_info.outputs.is_changed > 0
      run: sudo ./bin/arduino-cli lib install WebSockets

    - name: add esp8266 lib
      # if: steps.build_info.outputs.is_changed > 0
      run: sudo ./bin/arduino-cli core update-index --additional-urls http://arduino.esp8266.com/stable/package_esp8266com_index.json

    - name: install esp8266
      # if: steps.build_info.outputs.is_changed > 0
      run: sudo ./bin/arduino-cli core install esp8266:esp8266 --additional-urls http://arduino.esp8266.com/stable/package_esp8266com_index.json  

    - name: install python3
      # if: steps.build_info.outputs.is_changed > 0
      run: sudo apt-get install -yq python3

    - name: create static .h
      # if: steps.build_info.outputs.is_changed > 0
      run: |
        npm run create:version
        npm run create:connect-page

    - name: compile single
      # if: steps.build_info.outputs.is_changed > 0
      run: |
        npm run create:devise-type-single
        sudo ./bin/arduino-cli compile --fqbn esp8266:esp8266:d1 ./esp8266_firmware/esp8266_firmware.ino -o ./esp8266_firmware/single.bin

    - name: compile rgb
      # if: steps.build_info.outputs.is_changed > 0
      run: |
        npm run create:devise-type-rgb
        sudo ./bin/arduino-cli compile --fqbn esp8266:esp8266:d1 ./esp8266_firmware/esp8266_firmware.ino -o ./esp8266_firmware/rgb.bin

    - name: Deploy single firmvare to Server
      # if: steps.build_info.outputs.is_changed > 0
      uses: easingthemes/ssh-deploy@v2.1.1
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        REMOTE_HOST: ${{ secrets.HOST}}
        REMOTE_USER: ${{ secrets.USER}}
        SOURCE: "esp8266_firmware/single.bin"
        TARGET: "/root/backlighter/dist/esp8266_firmware/"

    - name: Deploy rgb firmvare to Server
      # if: steps.build_info.outputs.is_changed > 0
      uses: easingthemes/ssh-deploy@v2.1.1
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        REMOTE_HOST: ${{ secrets.HOST}}
        REMOTE_USER: ${{ secrets.USER}}
        SOURCE: "esp8266_firmware/rgb.bin"
        TARGET: "/root/backlighter/dist/esp8266_firmware/"

  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies
      run: npm install

    - name: Lint
      run: npm run lint

    - name: Build
      run: npm run build

    - name: update project on server
      uses: fifsky/ssh-action@master
      with:
        command: |
          cd /root/backlighter
          rm -rf ./dist/client
          mkdir dist
          git fetch --all
          git reset --hard origin/master
          npm install
        host: ${{ secrets.HOST}}
        user: ${{ secrets.USER}}
        key: ${{ secrets.SSH_PRIVATE_KEY}}

    - name: Deploy client to Server
      uses: easingthemes/ssh-deploy@v2.1.1
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        REMOTE_HOST: ${{ secrets.HOST}}
        REMOTE_USER: ${{ secrets.USER}}
        SOURCE: "dist/client/"
        TARGET: "/root/backlighter/dist/client"
